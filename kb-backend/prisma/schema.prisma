// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String               @unique
  phone               String?              @unique
  password            String
  role                Role                 @default(USER)
  isVerified          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  posts               KBPost[]
  refreshTokens       RefreshToken[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  updateRequests      UpdateRequest[]
}

enum Role {
  USER
  ADMIN
}

model KBPost {
  id             Int             @id @default(autoincrement())
  title          String
  content        String          @db.Text
  tags           String? // comma-separated or JSON string
  category       String?
  // imageUrl      String? // Cloudinary image URL
  // imagePublicId String? // Cloudinary public_id (for deleting/updating)
  status         PostStatus      @default(REVIEW)
  author         User            @relation(fields: [authorId], references: [id])
  authorId       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  publishedAt    DateTime?
  rejectReason   String? // <-- add rejection reason
  canEdit        Boolean         @default(false) // <-- user can edit if rejected
  updateRequests UpdateRequest[]
}

enum PostStatus {
  REVIEW
  PUBLISHED
  REJECTED
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String // hashed (sha256)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String // hashed
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String // hashed
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Announcement {
  id          Int       @id @default(autoincrement())
  title       String
  message     String // plain text or small HTML
  type        String    @default("info") // info | warning | error | success
  isActive    Boolean   @default(true)
  dismissible Boolean   @default(true)
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  dismissals AnnouncementDismissal[]
}

model AnnouncementDismissal {
  id             Int      @id @default(autoincrement())
  userId         Int
  announcementId Int
  dismissedAt    DateTime @default(now())

  announcement Announcement @relation(fields: [announcementId], references: [id])

  @@unique([userId, announcementId])
}

model UpdateRequest {
  id        Int           @id @default(autoincrement())
  postId    Int
  userId    Int
  reason    String?       @db.Text
  status    RequestStatus @default(PENDING)
  adminNote String?       @db.Text
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  post KBPost @relation(fields: [postId], references: [id])
  user User   @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
